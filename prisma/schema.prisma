// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  phoneNumber   String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  image         String?
  Account       Account[]
  Session       Session[]
  folders       Folder[]
  files         File[]
  subscription  String    @default("Basic")
  storageUsed   Int       @default(0)
}

enum Role {
  USER
  MGMT
  ADMIN
}

model Folder {
  id          String    @id @default(uuid())
  name        String
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  isArchive   Boolean   @default(false)
  isDocument  Boolean   @default(false)
  isStar      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  archivedAt  DateTime?
  parentId    String?
  parent      Folder?   @relation("FolderToFolder", fields: [parentId], references: [id], onDelete: SetNull)
  subfolders  Folder[]  @relation("FolderToFolder")
  files       File[]
}

model File {
  id          String    @id @default(uuid())
  name        String
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  folderId    String?
  folder      Folder?   @relation(fields: [folderId], references: [id], onDelete: SetNull)
  type        String
  size        Int
  key         String    @unique // S3 object key
  url         String?   // Cached URL (optional)
  isArchive   Boolean   @default(false)
  isDocument  Boolean   @default(false)
  isStar      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  archivedAt  DateTime?
}